const video = document.getElementById('video');
const statusDiv = document.createElement('div');
document.body.appendChild(statusDiv);

const audioMap = {
    'video1': 'audio/video1.mp3',
    'video2': 'audio/video2.mp3',
    'video3': 'audio/video3.mp3'
};

let currentAudio = null;
let predictionBuffer = [];
const CONFIDENCE_THRESHOLD = 0.99;
const BUFFER_SIZE = 5;

// –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
async function loadModel() {
    return await tf.loadLayersModel('./model/model.json');
}

// –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏ –≤—ã–±–æ—Ä –∫–∞–º–µ—Ä—ã
async function setupCamera() {
    try {
        const devices = await navigator.mediaDevices.enumerateDevices();
        const videoDevices = devices.filter(device => device.kind === 'videoinput');

        if (videoDevices.length === 0) {
            alert('–ö–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }

        const cameraSelect = document.getElementById('cameraSelect');
        cameraSelect.innerHTML = '';

        videoDevices.forEach(device => {
            const option = document.createElement('option');
            option.value = device.deviceId;
            option.text = device.label || `–ö–∞–º–µ—Ä–∞ ${cameraSelect.length + 1}`;
            cameraSelect.appendChild(option);
        });

        cameraSelect.addEventListener('change', () => {
            startCamera(cameraSelect.value);
        });

        // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –∫–∞–º–µ—Ä—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        await startCamera(videoDevices[0].deviceId);

    } catch (error) {
        alert("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø.");
        console.error("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ:", error);
        statusDiv.textContent = "‚ùå –ö–∞–º–µ—Ä–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞.";
    }
}

async function startCamera(deviceId) {
    try {
        const stream = await navigator.mediaDevices.getUserMedia({
            video: { deviceId: { exact: deviceId } }
        });

        video.srcObject = stream;
        video.play();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ.');
    }
}

// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞
function playAudio(audioSrc) {
    if (currentAudio) {
        currentAudio.pause();
    }
    currentAudio = new Audio(audioSrc);
    currentAudio.play();
}

// –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
async function run() {
    const model = await loadModel();
    await setupCamera();

    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');

    setInterval(() => {
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

        const input = tf.browser.fromPixels(canvas)
            .resizeNearestNeighbor([224, 224])
            .toFloat()
            .div(tf.scalar(255)) // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
            .expandDims();
        
        const prediction = model.predict(input).dataSync();

        const maxConfidence = Math.max(...prediction);
        const predictedClass = prediction.indexOf(maxConfidence);

        if (maxConfidence >= CONFIDENCE_THRESHOLD) {
            predictionBuffer.push(predictedClass);

            if (predictionBuffer.length >= BUFFER_SIZE) {
                const consistentPrediction = predictionBuffer.slice(-BUFFER_SIZE);
                if (consistentPrediction.every(p => p === predictedClass)) {
                    const videoName = `video${predictedClass + 1}`;
                    statusDiv.textContent = `‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ: ${videoName} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${Math.round(maxConfidence * 100)}%)`;
                    playAudio(audioMap[videoName]);
                }
            }
        } else {
            predictionBuffer = [];
            statusDiv.textContent = "üîç –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è...";
        }
    }, 1000);
}

run();
